rep(p,f)
t = rep(p,f)
rep(t,c)
rep(p,f)
print(x)
impares = function(v){
pos = v%%2 != 0
return(length(pos))
}
impares(1:10)
impares = function(v){
pos = v%%2 != 0
return(length(v[pos]))
}
impares(1:10)
cambio = function(M){
pos = is.na(M)
M[pos] = 0
return(M)
}
M = c(1,2,NA)
cambio(M)
u = c(1,1,1,1,2)
u
unique(u)
c = unique(u)
c
c[1]
unir = function(u,v){
return(union(unique(u),unique(v)))
}
unir(c(1,1,2,3),c(2,3,5,5,7))
cadena = "hola"
grep([:h:],cadena)
grep("h",cadena)
cadena = "holah"
grep("h",cadena)
grep("l",cadena)
gregexpr("l",cadena)
which(strsplit(cadena, "")[[1]]=="h")
v = 1:20
grep(1,v)
grep("1",v)
grep([:1:],v)
match(v,1)
which(1 %in% v)
c = c(1,2,3,4,1)
which(1 %in% c)
match(1,c)
c
match(7,c)
c
c[1:]
c[1:,]
c[1:]
c[2:3]
c[-1]
c[-2]
c[-2:0]
c[-2:0]
c[-3:0]
c[-1:0]
partir = function(v,x,y){
pos_x = match(x,v)
pos_y = match(y,v)
if (is.na(pos_y) == F)
return(v[pos_x:pos_y])
else
return(v[-pos_x+1:0])
}
c
partir(c,2,4)
partir(c,2,5)
c[-1:0]
partir = function(v,x,y){
pos_x = match(x,v)
pos_y = match(y,v)
if (is.na(pos_y) == F)
return(v[pos_x:pos_y])
else
return(v[(-pos_x+1):0])
}
partir(c,2,5)
partir = function(v,x,y){
pos_x = match(x,v)
pos_y = match(y,v)
ifelse(is.na(pos_y) == F, return(v[pos_x:pos_y]),return(v[(-pos_x+1):0]))
}
partir = function(v,x,y){
pos_x = match(x,v)
pos_y = match(y,v)
ifelse(is.na(pos_y) == F, return(v[pos_x:pos_y]),return(v[(-pos_x+1):0]))
}
v = 1:10
partir(v,2,7)
partir(v,8,15)
creciente = function(v){
crec = v[0] <= v[1]
i = 2
while(crec & (i+1)<length(v)){
crec = v[i] <= v[i+1]
}
return(crec)
}
c = 1:10
creciente(c)
length(c)
creciente = function(v){
crec = v[0] <= v[1]
i = 2
while(crec && (i+1)<length(v)){
crec = v[i] <= v[i+1]
}
return(crec)
}
creciente(c)
creciente = function(v){
crec = v[0] <= v[1]
i = 2
while(crec && (i+1)<length(v)){
crec = v[i] <= v[i+1]
i = i+1
}
return(crec)
}
creciente(1:10)
creciente = function(v){
crec = v[0] <= v[1]
i = 2
while(crec & (i+1)<length(v)){
crec = v[i] <= v[i+1]
i = i+1
}
return(crec)
}
creciente(1:10)
creciente = function(v){
crec = v[0] <= v[1]
i = 2
l = length(v)
while(crec & (i+1)<l){
crec = v[i] <= v[i+1]
i = i+1
}
return(crec)
}
creciente(1:10)
i = 1
l = length(1:10)
i+1 < l
creciente = function(v){
crec = v[1] <= v[2]
i = 3
l = length(v)
while(crec & (i+1)<l){
crec = v[i] <= v[i+1]
i = i+1
}
return(crec)
}
creciente(1:10)
creciente(10:1)
montecarlo = function(N){
hits = 0
for(i in c(1:N)){
r = runif(2,0,1)
if(r[2]<r[1]^2)
hits = hits + 1
}
return(hits/N)
}
montecarlo(10)
montecarlo(10000)
montecarlo(10000000)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
USArrests
length(USArrests)
nrows(USArrests)
nrow(USArrests)
names(USArrests)
str(USArrests)
row.names(USArrests)
col.names(USArrests)
head(USArrests,6)
order(USArrests,decreasing=TRUE, method=c("UrbanPop"))
USArrests[order(decreasing = TRUE, method= c("UrbanPop"))]
USArrests[order(USArrests$UrbanPop,decreasing = TRUE)]
USArrests[order(USArrests$UrbanPop)]
order(USArrests$UrbanPop)
order(USArrests$UrbanPop,decreasing=TRUE)
USArrests[order(USArrests$UrbanPop,decreasing=TRUE)]
USArrests[order(USArrests$UrbanPop,decreasing=TRUE),]
USArrests[order(c("USArrests$UrbanPop","USArrests$Rape"),decreasing=TRUE),]
USArrests[order(USArrests$UrbanPop,USArrests$Rape,decreasing=TRUE),]
USArrests$Murder
USArrests$Murder[2:4]
head(USArrests,5)
USArrests[,1:2]
cbind(USArrests[,1],USArrests[,3])
USArrests[,1-3]
USArrests[,1,3]
USArrests[,c(1,3)]
head(USArrests(,1:2),2)
head(USArrests[],1:2],2)
head(USArrests[,1:2],2)
min(USArrests$Murder)
apply(USArrests$Murder,1,min)
which(USA)
which(USArrests$Murder == min(USArrests$Murder))
row.names(USArrests[34])
row.names(USArrests)
row.names(USArrests)[34]
which(USArrests$Murder <0 0.04)
which(USArrests$Murder < 0.04)
which(USArrests$Murder < 4)
row.names(USArrests)[which(USArrests$Murder < 4)]
(USArrests$UrbanPop-min(USArrests$UrbanPop))/sd(USArrests$UrbanPop)
(USArrests$UrbanPop-mean(USArrests$UrbanPop))/sd(USArrests$UrbanPop)
quantile(USArrests$UrbanPop)
row.names(USArrests)[which(USArrests$UrbanPop > 77.75)]
co2 = CO2
co2
str(co2)
co2$Plant
order(co2$Plant, decreasing = FALSE)
state.x77
is.data.frame(state.x77)
state.x77 = data.frame(state.x77)
is.data.frame(state.x77)
str(state.x77)
subset(state.x77, state.x77$Income>4300)
row.names(state.x77)[which(state.x77$Income==max(state.x77$Income))]
state.abb
df2 = data.frame(state.abb,state.area,state.division, state.name,state.region)
df2
df2 = data.frame(state.abb,state.area,state.division, state.region,row.names = state.name)
df2
sub("state.","",colnames(df2))
df2
colnames(df2) = sub("state.","",colnames(df2))
colnames(df2)
df2
df2$division = NULL
df2
df2$division = NULL
data.frame(state.x77,df2)
str(state.x77)
df2
state.x77 = data.frame(state.x77,df2)
str(state.x77)
state.x77$Life.Exp = NULL
state.x77$HS.Grad = NULL
state.x77$Frost = NULL
state.x77$abb = NULL
state.x77$area = NULL
ifelse(state.x77$Illiteracy<1, state.x77$CatIlliteracy = "low", ifelse(state.x77$Illiteracy <2, state.x77$CatIlliteray = "some", state.x77$CatIlliteracy = "high"))
cut(state.x77$Illiteracy,breaks = 0:2)
cut(state.x77$Illiteracy,breaks = 0:2,include.lowest = TRUE, right=FALSE)
filter(state.x77,min(state.x77$Illiteracy)&max(state.x77$Income))
filter(state.x77,min(state.x77$Illiteracy))
which(state.x77$Income == max(state.x77$Income))
which(state.x77$Income == max(state.x77$Income) & (state.x77$Illiteracy == min(state.x77$Illiteracy)))
runif(100,1,10)
order(runif(100,1,10))
lista = list(runif(10,1,10),runif(10,5,9))
lista
lista[1]
lista[2]
lista = list(runif(10,1,10),runif(10,5,9),runif(10,7,96),runif(10,4,10),runif(10,5,9))
lista
order(lista)
order(lista[1])
order(lista[1])
lista[1]
lista[1][1]
lista[1][1][1]
order(lista[1])
order(unlist(lista[1]))
unlist(lista[1])[order(unlist(lista[1]))]
list(unlist(lista[1])[order(unlist(lista[1]))])
lista = list(runif(10,1,10),runif(10,5,9),runif(10,7,96),runif(10,4,10),runif(10,5,9))
for (i in 1:5):
lista[i] = list(unlist(lista[i])[order(unlist(lista[i]))])
lista = list(runif(10,1,10),runif(10,5,9),runif(10,7,96),runif(10,4,10),runif(10,5,9))
for (i in 1:5){
lista[i] = list(unlist(lista[i])[order(unlist(lista[i]))])
}
lista
A = matrix(runif(20,1,14),nrow=5,ncol=4)
A[A >7]
list(A[A>7])
state.x77
knitr::opts_chunk$set(echo = TRUE)
state.x77 = data.frame(state.x77)
state.x77 = data.frame(state.x77)
subset(state.x77, state.x77$Income>4300)
df2 = data.frame(state.abb,state.area,state.division, state.region,row.names = state.name)
state.x77 = data.frame(state.x77,df2)
df2$division = NULL
state.x77 = data.frame(state.x77,df2)
state.x77$Life.Exp = NULL
state.x77$HS.Grad = NULL
state.x77$Frost = NULL
state.x77$abb = NULL
state.x77$area = NULL
state.x77
ill_cat = vector()
ifelse(state.x77$Illiteracy<1,append(ill_cat,"low"),ifelse(state.x77$Illiteracy<2,append(ill_cat,"some",append(ill_cat,"high"))))
ifelse(state.x77$Illiteracy<1,append(ill_cat,"low"),ifelse(state.x77$Illiteracy<2,append(ill_cat,"some",append(ill_cat,"high"))))
ifelse(state.x77$Illiteracy<1,append(ill_cat,"low"),ifelse(state.x77$Illiteracy<2,append(ill_cat,"some"),append(ill_cat,"high")))
ill_cat = ifelse(state.x77$Illiteracy<1,append(ill_cat,"low"),ifelse(state.x77$Illiteracy<2,append(ill_cat,"some"),append(ill_cat,"high")))
state.x77 = cbind(state.x77,ill_cat)
state.x77
state.x77 %>% filter(state.x77$state.region.1 == "West", state.x77$Illiteracy == min(state.x77$Illiteracy), state.x77$Income == max(state.x77$Income))
library("tidyverse")
state.x77 %>% filter(state.x77$state.region.1 == "West", state.x77$Illiteracy == min(state.x77$Illiteracy), state.x77$Income == max(state.x77$Income))
library(hflights)
hflights
library("hflights")
install.packages("hflighst")
install.packages("hflights")
ages
library("hflights")
hflights
with(hflights, hflights$Month==1 & hflights$DayofMonth == 1)
hflights[with(hflights, hflights$Month==1 & hflights$DayofMonth == 1)]
hflights$DayofMonth[with(hflights, hflights$Month==1 & hflights$DayofMonth == 1)]
with(hflights, hflights$Month==1 & hflights$DayofMonth == 1)
which(hflights, hflights$Month==1 & hflights$DayofMonth == 1)
which(hflights$Month==1 & hflights$DayofMonth == 1)
row.names(hflights)[which(hflights$Month==1 & hflights$DayofMonth == 1)]
str(hflights)
hflights
which[hflights$UniqueCarrier=="AA" | hflights$UniqueCarrier=="UA"]
which(hflights$UniqueCarrier=="AA" | hflights$UniqueCarrier=="UA")
length(row.names(hflights))
length(which(hflights$UniqueCarrier=="AA" | hflights$UniqueCarrier=="UA"))
str(hflights)
df=cbind(df,mph=hflights$Distance/hflights$AirTime)
str(df)
df
df = data.frame(hflights$TailNum,hflights$DepTime,hflights$ArrTime,hflights$FlightNum)
df=cbind(df,mph=hflights$Distance/hflights$AirTime)
str(df)
df$mph
students = read.table("Datos-20192018/students.txt",sep="\t")
students = read.table("Datos-20191020/students.txt",sep="\t")
students = read.table("Datos-20191020/student.txt",sep="\t")
students
colnames(students)
students = read.table("Datos-20191020/student.txt",sep="\t",col.names = TRUE)
students = read.table("Datos-20191020/student.txt",sep="\t",col.names = TRUE,row.names = T)
students = read.table("Datos-20191020/student.txt",sep="\t",col.names = TRUE,row.names = TRUE)
View(students)
students = read.table("Datos-20191020/student.txt",sep="\t", header=TRUE)
colnames(students)
students["height"]
students$height
table(students)
table(students$gender)
sym = vector()
sym = ifelse(students$gender=="male",append(sym,"M"),append(sym,"F"))
students = cbind(students,sym)
colours = vector()
colours = ifelse(students$population=="kuopio",append(colours,"Blue"),append(colours,"Red"))
students = cbind(students,colours)
students
males = which(students.new$sym == "M")
females = which(students.new$sym == "F")
students.new = data.frame(students)
males = which(students.new$sym == "M")
females = which(students.new$sym == "F")
students[males]
students$gender[males]
males
students[1]
students.male = students[males,]
students.male
write.table("Datos20191020/students-new.txt",sep="\t")
write.table(students.new"Datos20191020/students-new.txt",sep="\t")
write.table(students.new,"Datos20191020/students-new.txt",sep="\t")
View(students.new)
View(students.new)
write.table(students.new,"Datos20191020/students-new.txt",sep="\t",col.names = colnames(students.new))
write.table(students.new,"Datos-20191020/students-new.txt",sep="\t",col.names = colnames(students.new))
write.table(students.new,"Datos-20191020/students-new.txt",sep="\t")
write.table(students.new,"Datos-20191020/students-new.txt",sep="\t",row.names = FALSe)
write.table(students.new,"Datos-20191020/students-new.txt",sep="\t",row.names = FALSE)
lista = list(runif(10,1,10),runif(10,5,9),runif(10,7,96),runif(10,4,10),runif(10,5,9))
lista
lapply(lista,1,order)
lapply(lista,order)
lista = lapply(lista,order)
lista
lista[lapply(lista,order)]
unlist(lista)[lapply(lista,order)]
unlist(lista)
lista[lapply(lista,order)]
lapply(lista,order)
unlist(lapply(lista,order))
unlist(lista)[unlit(lapply(lista,order))]
unlist(lista)[unlist(lapply(lista,order))]
lista = list(unlist(lista))[lapply(lista,order)]
lista = list(unlist(lista)[lapply(lista,order)])
list(unlist(lista)[unlist(lapply(lista,order))])
lista
lista = list(runif(10,1,10),runif(10,5,9),runif(10,7,96),runif(10,4,10),runif(10,5,9))
posiciones = apply(lista,order)
for (i in 1:5){
lista[i] = list(unlist(lista[i])[unlist(posiciones[i])])
}
lista = list(runif(10,1,10),runif(10,5,9),runif(10,7,96),runif(10,4,10),runif(10,5,9))
posiciones = lapply(lista,order)
for (i in 1:5){
lista[i] = list(unlist(lista[i])[unlist(posiciones[i])])
}
lista
montecarlo = function(N){
hits = 0
for(i in 1:N){
r = runif(2,0,1)
if(r[2]<r[1]^2)
hits = hits + 1
}
return(hits/N)
}
montecarlo(10)
montecarlo(10000)
montecarlo(10000000)
M = matrix(sample(1:100,20,replace=T),nrow=5,ncol=4)
impares = M %% 2 != 0
M[impares] = -M[impares]
minimos = apply(M,2,min)
M
minimos
M = matrix(sample(1:100,20,replace=T),nrow=5,ncol=4)
impares = M %% 2 != 0
M[impares] = -M[impares]
minimos = apply(M,2,min)
M[impares] = -M[impares]
pos_negativos = minimos < 0
minimos[pos_negativos] = -minimos[pos_negativos]
M
minimos
A = matrix(runif(20,1,14),nrow=5,ncol=4)
l = list(A[A >7])
A
l
apply(A,1,function(A){A[A>7]})
unlist(apply(A,1,function(A){A[A>7]}))
l
vyc = function(cadena){
vocales = gsub("[^aeiouAEIOU]","",cadena)
consonantes = str_remove_all(cadena,"[aeiou]")
consonantes = str_remove_all(consonantes," ")
return(list(vocales,consonantes))
}
cad = "Hola me llamo Luis"
l = vyc(cad)
print(l[1])
print(l[2])
library("tidyverse")
vyc = function(cadena){
vocales = gsub("[^aeiouAEIOU]","",cadena)
consonantes = str_remove_all(cadena,"[aeiou]")
consonantes = str_remove_all(consonantes," ")
return(list(vocales,consonantes))
}
cad = "Hola me llamo Luis"
l = vyc(cad)
print(l[1])
print(l[2])
install.package("tidyverse")
library("tidyverse")
vyc = function(cadena){
vocales = gsub("[^aeiouAEIOU]","",cadena)
consonantes = str_remove_all(cadena,"[aeiou]")
consonantes = str_remove_all(consonantes," ")
return(list(vocales,consonantes))
}
cad = "Hola me llamo Luis"
l = vyc(cad)
print(l[1])
print(l[2])
install.packages("tidyverse")
library("tidyverse")
vyc = function(cadena){
vocales = gsub("[^aeiouAEIOU]","",cadena)
consonantes = str_remove_all(cadena,"[aeiou]")
consonantes = str_remove_all(consonantes," ")
return(list(vocales,consonantes))
}
cad = "Hola me llamo Luis"
l = vyc(cad)
print(l[1])
print(l[2])
library("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
library("tidyverse")
vyc = function(cadena){
vocales = gsub("[^aeiouAEIOU]","",cadena)
consonantes = str_remove_all(cadena,"[aeiou]")
consonantes = str_remove_all(consonantes," ")
return(list(vocales,consonantes))
}
cad = "Hola me llamo Luis"
l = vyc(cad)
print(l[1])
print(l[2])
